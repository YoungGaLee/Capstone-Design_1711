
with torch.no_grad():
    prediction = power_prediction(testX_tensor)
    prediction_powerV = prediction *(test_y_denominator + 1e-7) + np.min(testY, 0) 
    
    #RMSE, MAPE는 분기별
    MSE = torch.nn.MSELoss(reduction='none') 
    MSE_sum = torch.nn.MSELoss() 

    #예측값 4분기
    part_1 = prediction_powerV[:90]
    part_2 = prediction_powerV[90:181]
    part_3 = prediction_powerV[181:273]
    part_4 = prediction_powerV[273:]



    #실제값 4분기
    Y_1 = testY[:90]
    Y_2 = testY[90:181]
    Y_3 = testY[181:273]
    Y_4 = testY[273:]

    Y_tensor_1 = testY_tensor[:90]
    Y_tensor_2 = testY_tensor[90:181]
    Y_tensor_3 = testY_tensor[181:273]
    Y_tensor_4 = testY_tensor[273:]


    part_n_1 = prediction[:90]
    part_n_2 = prediction[90:181]
    part_n_3 = prediction[181:273]
    part_n_4 = prediction[273:]

    MSE_whole = MSE(testY_tensor,prediction)
    MSE_sum = MSE_sum(testY_tensor,prediction)
    MSE_1 = MSE(Y_tensor_1,part_n_1) # 실제:실제값
    MSE_2 = MSE(Y_tensor_2,part_n_2)
    MSE_3 = MSE(Y_tensor_3,part_n_3)
    MSE_4 = MSE(Y_tensor_4,part_n_4)


    RMSE_whole = torch.sqrt(MSE_whole) #나눠준 후 루트
    RMSE_sum = torch.sqrt(MSE_sum) #나눠준 후 루트
    RMSE_1 = torch.sqrt(MSE_1)
    RMSE_2 = torch.sqrt(MSE_2)
    RMSE_3 = torch.sqrt(MSE_3)
    RMSE_4 = torch.sqrt(MSE_4)




    MAPE_whole =  np.abs((testY - prediction_powerV.numpy()) / testY) * 100
    MAPE_sum =  np.mean(np.abs((testY - prediction_powerV.numpy()) / testY)) * 100
    MAPE_1 =  np.mean(np.abs((Y_1 - part_1.numpy()) / Y_1)) * 100
    MAPE_2 =  np.mean(np.abs((Y_2 - part_2.numpy()) / Y_2)) * 100
    MAPE_3 =  np.mean(np.abs((Y_3 - part_3.numpy()) / Y_3)) * 100
    MAPE_4 =  np.mean(np.abs((Y_4 - part_4.numpy()) / Y_4)) * 100


#여기서부터는 변수 액셀에 적용하면 굳굳
prediction_powerV_nn = prediction_powerV.numpy() #예측값
y = testY_tensor.numpy() #실제값

#RMSE 텐서에서 넘파이 형태로
RMSE_whole = RMSE_whole.numpy()
RMSE_sum = RMSE_sum.numpy()
RMSE_1 = RMSE_1.numpy()
RMSE_2 = RMSE_2.numpy()
RMSE_3 = RMSE_3.numpy()
RMSE_4 = RMSE_4.numpy()

rmse_sum = np.round_(RMSE_sum,3)
mape_sum = np.round_(MAPE_sum,3)

print('RMSE(전체) : ',rmse_sum)
print('MAPE(전체) : ',mape_sum)

error_V = np.round_(prediction_powerV_nn - testY,2)
rmse = np.round_(RMSE_whole,3)
mape = np.round_(MAPE_whole,3)

print('오차값(예측-실제) : ',error_V)
print('RMSE(전체) : ',rmse)
print('MAPE(전체) : ',mape)
